---
format: html
---

{{< include md/welcome.md >}}

------------------------------------------------------------------------

# Rights

**Rights** guarantee *people* **the ability to pursue life, liberty, and happiness**. While the rights we defend will often have legal footing within the United States and internationally, the guiding principle will always be life, liberty, and happiness.

```{r}
#| label: rights-data
#| echo: false
#| message: false
#| warning: false
library(tidyverse)
library(yaml)
library(knitr)
library(kableExtra)

# Define %||% fallback
`%||%` <- function(a, b) if (!is.null(a)) a else b

# Set path
folder <- "md/Rights"
files <- list.files(folder, pattern = "\\.md$", full.names = TRUE)

# Extract YAML
extract_yaml <- function(path) {
  lines <- readLines(path, warn = FALSE)
  if (length(lines) == 0 || lines[1] != "---") return(NULL)
  
  end_idx <- which(lines == "---")[2]
  if (is.na(end_idx)) return(NULL)
  
  yaml_content <- paste(lines[2:(end_idx - 1)], collapse = "\n")
  metadata <- yaml.load(yaml_content)
  
  html_path <- str_replace(path, "\\.md$", ".html") #get html path
  markdown_link <- sprintf("[%s](%s)", metadata$title %||% "", html_path)
    
  tibble(
    Link = html_path,
    Right = metadata$title %||% "",
    Definition = metadata$definition %||% "",
    Publish = metadata$publish %||% FALSE
  )
}

# Build the rights table
results <- map_dfr(files, extract_yaml) %>%
  filter(Publish == TRUE) %>%
  select(Link, Right, Definition)

# Reorder
results <- results %>%
  mutate(order = if_else(Right == "Example rights", 0, 1)) %>%
  arrange(order, Right) %>%
  select(-order)


```

```{r}
#| label: rights-table
#| eval: false
#| include: false

# Render Table
results %>%
  mutate(
    # Right = map_chr(Link, ~markdown::markdownToHTML(text = .x, fragment.only = TRUE)),
    Definition = map_chr(Definition, ~markdown::markdownToHTML(text = .x, fragment.only = TRUE))) %>%
    select(-Link) %>%
  kable("html",
        escape = FALSE) %>%
  kable_styling(full_width = TRUE,
                bootstrap_options = c("striped", "hover", "condensed", "responsive"),
                )

```

```{r echo=FALSE, results='asis'}
#| label: rights-cards
library(knitr)

# Loop over results and output raw HTML using asis_output
cat('<div class="card-grid">')

for (i in seq_len(nrow(results))) {
  cat(asis_output(sprintf('
<div class="right-card">
  <h3>%s</h3>
  <p>%s</p>
  <a href="%s">Rationale and sources ↗</a>
</div>
', results$Right[i], results$Definition[i], results$Link[i])))
}
cat('</div>')
```

------------------------------------------------------------------------

# Issues

The issues we cover will be cases where individuals, organizations, or governments systemically infringe upon the *rights* of an individual or group of individuals.

```{r}
#| label: issues-data
#| echo: false
#| message: false
#| warning: false


# Define %||% fallback
`%||%` <- function(a, b) if (!is.null(a)) a else b

# Set path
folder <- "md/Issues"
files <- list.files(folder, pattern = "\\.md$", full.names = TRUE)

# Extract YAML
extract_yaml <- function(path) {
  lines <- readLines(path, warn = FALSE)
  if (length(lines) == 0 || lines[1] != "---") return(NULL)
  
  end_idx <- which(lines == "---")[2]
  if (is.na(end_idx)) return(NULL)
  
  yaml_content <- paste(lines[2:(end_idx - 1)], collapse = "\n")
  metadata <- yaml.load(yaml_content)
  
  html_path <- str_replace(path, "\\.md$", ".html") #get html path
  markdown_link <- sprintf("[%s](%s)", metadata$title %||% "", html_path)

  
  tibble(
    Link = html_path,
    Issue = metadata$title %||% "",
    Summary = metadata$summary %||% "",
    Publish = metadata$publish %||% FALSE
  )
}

# Build table
results <- map_dfr(files, extract_yaml) %>%
  filter(Publish == TRUE) %>%
  select(Link, Issue, Summary)

```

```{r}
#| label: issues-table
#| eval: false
#| include: false

# Render Table
results %>%
  mutate(Summary = map_chr(Summary, ~markdown::markdownToHTML(text = .x, fragment.only = TRUE))) %>%
  kable("html", escape = FALSE) %>%
  kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed", "responsive"))
```

```{r echo=FALSE, results='asis'}
#| label: issues-cards
library(knitr)

# Loop over results and output raw HTML using asis_output
cat('<div class="flip-card-grid">')

for (i in seq_len(nrow(results))) {
  cat(asis_output(sprintf('
<div class="flip-card">
<div class="flip-card-inner">
<div class="flip-card-front">
  <h3>%s</h3>
  <span class="flip-icon" title="Flip to read more">↻</span>
</div>
<div class="flip-card-back">
  <p>%s</p>
  <a href="%s">Read the Issue ↗</a>
</div>
</div>
</div>
', results$Issue[i], results$Summary[i], results$Link[i])))
}
cat('</div>')
```

------------------------------------------------------------------------

# Solutions

The solutions we cover will be public policy or laws that can be passed by congress to remedy an issue.

```{r}
#| label: solutions-data
#| echo: false
#| message: false
#| warning: false


# Define %||% fallback
`%||%` <- function(a, b) if (!is.null(a)) a else b

# Set path
folder <- "md/Solutions"
files <- list.files(folder, pattern = "\\.md$", full.names = TRUE)

# Extract YAML
extract_yaml <- function(path) {
  lines <- readLines(path, warn = FALSE)
  if (length(lines) == 0 || lines[1] != "---") return(NULL)
  
  end_idx <- which(lines == "---")[2]
  if (is.na(end_idx)) return(NULL)
  
  yaml_content <- paste(lines[2:(end_idx - 1)], collapse = "\n")
  metadata <- yaml.load(yaml_content)

  html_path <- str_replace(path, "\\.md$", ".html") #get html path
  markdown_link <- sprintf("[%s](%s)", metadata$title %||% "", html_path)
  
  tibble(
    Link = html_path,
    Solution = metadata$title %||% "",
    Summary = metadata$summary %||% "",
    Publish = metadata$publish %||% FALSE
  )
}

# Build table
results <- map_dfr(files, extract_yaml) %>%
  filter(Publish == TRUE) %>%
  select(Link, Solution, Summary)


```

```{r}
#| label: solutions-table
#| eval: false
#| include: false

# Render Table
results %>%
  mutate(Summary = map_chr(Summary, ~markdown::markdownToHTML(text = .x, fragment.only = TRUE))) %>%
  kable("html", escape = FALSE) %>%
  kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed", "responsive"))
```

```{r echo=FALSE, results='asis'}
#| label: solutions-cards
library(knitr)

# Loop over results and output raw HTML using asis_output
cat('<div class="flip-card-grid">')

for (i in seq_len(nrow(results))) {
  cat(asis_output(sprintf('
<div class="flip-card">
<div class="flip-card-inner">
<div class="flip-card-front">
  <h3>%s</h3>
  <span class="flip-icon" title="Flip to read more">↻</span>
</div>
<div class="flip-card-back">
  <p>%s</p>
  <a href="%s">Read about this solution ↗</a>
</div>
</div>
</div>
', results$Solution[i], results$Summary[i], results$Link[i])))
}
cat('</div>')
```

------------------------------------------------------------------------

```{=html}
<script>
document.addEventListener("DOMContentLoaded", function() {
  
  const flipCards = document.querySelectorAll('.flip-card');
  const isTouchDevice = 'ontouchstart' in window || navigator.maxTouchPoints > 0;

if (!isTouchDevice) {
  flipCards.forEach(card => {
    
    card.addEventListener('mouseenter', function() {
      const backHeight = this.querySelector('.flip-card-back').offsetHeight;
      this.style.marginBottom = (backHeight - 300) + 'px';
    });

    card.addEventListener('mouseleave', function() {
      this.style.marginBottom = '0';
    });

  });
}

if (isTouchDevice) {

  // If card is clicked, add appropriate margin, else no margin
  document.addEventListener('ontouchstart', function (e) {
    flipCards.forEach(card => {
      if (card.contains(e.target)) {
        const backHeight = card.querySelector('.flip-card-back').offsetHeight;
        card.style.marginBottom = (backHeight - 300) + 'px';
      } else {
        card.style.marginBottom = '0';
      }
    });
  });
  
}


});
</script>
```
